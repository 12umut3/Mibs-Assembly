Part a)
-TRISx registers configure the data direction flow through port I/O pin(s). The TRISx register bits determine whether a PORTx I/O pin is an input or an output.
-PORTx registers allow I/O pins to be accessed.
-LATx registers hold data written to port I/O pin(s).
-Open-Drain Control register control each I/O pin and these pins can be individually configured for either normal digital output or open-drain output.
Part b)
//variables
char counter;
     char counter;
     char compcounter;
     int forward;
     int i;
void main() {

  TRISA = 0xFFFF;          // set direction to be input
  TRISD = 0xFFFF;		//set direction to be output
  LATA = 0xFFFF;           // turn OFF the LATA leds
  LATD = 0xFFFF;		// turn OFF the LATD leds
  LATF = 0xFFFF;
  AD1PCFG = 0xFFFF;   // Configure AN pins
  JTAGEN_bit = 0xFFFF;     // Disable JTAG

  counter = 0;
  i = 0;
  
  compcounter = ~(counter)
  PORTD = compcounter;

  while(1) {
    //LEDs
  if(counter >= 0){
    while( counter <= 255)
    {
             LATA =(0x8888/counter);
             PORTD = compcounter;
	
	     i = 0;
             if(PORTAbits.RA0 == 1 && PORTAbits.RA1 == 0)  //increment if button 0 is pushed and button 1 is not
             	forward = 1;
	     	counter++;
             else if(  PORTAbits.RA0 == 0 && PORTAbits.RA1 == 1  ) //decrement if button 1 is pushed and button 0 is not
             	forward = 0;
             	counter--;
    }
    counter = 0;
  }

}
}
Part c) // In this part I added delay to upward code.
//variables
char counter;
     char counter;
     char compcounter;
     int forward;
     int delay;
     int i;
void wait() {
  Delay_ms(100);
}
void wait2() {
  Delay_ms(700);
}

void main() {

  TRISA = 0xFFFF;          // set direction to be input
  TRISD = 0xFFFF;		//set direction to be output
  LATA = 0xFFFF;           // turn OFF the LATA leds
  LATD = 0xFFFF;		// turn OFF the LATD leds
  LATF = 0xFFFF;
  AD1PCFG = 0xFFFF;   // Configure AN pins
  JTAGEN_bit = 0xFFFF;     // Disable JTAG

  counter = 0;
  delay = 20;
  i = 0;
  
  compcounter = ~(counter)
  PORTD = compcounter;

  while(1) {
    //LEDs
  if(counter >= 0){
    while( counter <= 255)
    {       LATA =(0x8888/counter);
             PORTD = compcounter;
	
             while(i > delay) //Arrange the delay
             {
                  Delay_ms(20);
		  i++;

             }
	     i = 0;
             if(PORTAbits.RA0 == 1 && PORTAbits.RA1 == 0)  //increment if button 0 is pushed and button 1 is not
             	forward = 1;
	     	counter++;
             else if(  PORTAbits.RA0 == 0 && PORTAbits.RA1 == 1  ) //decrement if button 1 is pushed and button 0 is not
             	forward = 0;
             	counter--;
	     // for delay
             if(PORTAbits.RA2 == 1 && PORTAbits.RA3 == 0)   //if button 2 is pushed make the clock faster by decrementing delay
             	delay = delay - 1;
             else if(PORTAbits.RA2 == 0 && PORTAbits.RA3 == 1  )   //if button 3 is pushed make the clock slower by  incrementing delay
             	delay = delay + 1;
             else
              	delay = 20; //default delay 
   }


    }
    counter = 0;

}
}
